<?php

/**
 * @file
 * Preprocess functions for Basic.
 */


use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Connection;
use Drupal\node\Entity\Node;
use Drupal\file\Entity\File;
use Drupal\user\Entity\User;
use Drupal\Core\Url;
/**
 * Prepares variables for the html.html.twig template.
 */
function basic_preprocess_html(&$variables) {
  $variables['test'] = 'ssss';
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    if (!empty($alias)) {
      $name = str_replace('/', '-', $alias);
      $variables['attributes']['class'][] = 'page-' . $name;
      list($section,) = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }

  // Add cachability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();
}

/**
 * Prepares variables for the field.html.twig template.
 */
function basic_preprocess_field(&$variables, $hook) {
  // Make additional variables available to the template.
  $variables['bundle'] = $variables['element']['#bundle'];
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['nid'] = $node->id();
  }
}


/**
 * Implementation of theme_menu_link__MENU_NAME().
 */
function basic_menu_link__main_menu(array $variables) {
  $element = $variables ['element'];
  $sub_menu = '';

  if ($element ['#below']) {
    $sub_menu = drupal_render($element ['#below']);
  }
  $icon = 'icon-' . $element['#title'];
  $output = l($icon . $element ['#title'], $element ['#href'], $element ['#localized_options']);
  return '<li' . drupal_attributes($element ['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Implements hook_preprocess_user().
 */
function basic_preprocess_user(&$variables) {
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $variables['userDate'] = $user->get('uid')->value;
}

/**
 * Implements hook_entity_base_field_info().
 */
function basic_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'user') {
    $fields['field1'] = BaseFieldDefinition::create('text')
      ->setLabel(t('New field 1'))
      ->setTranslatable(TRUE);
    return $fields;
  }
}


 
function basic_preprocess_block(&$variables)  {
  
  //if(null !== Drupal::currentUser()->id()) {
      $user = User::load(Drupal::currentUser()->id()); 
          $file = $user->get('user_picture')->target_id ? File::load($user->get('user_picture')->target_id) : null;
          if(null !== $user->get('user_picture')->target_id) {
            $uri = $file->get('uri')->value;
            $img_user_account = file_create_url($uri);
          }else{
            $img_user_account = '/' . $variables['directory'] . '/images/invitado.jpg';
          }

      

          $u = $variables['user'];
          $u->img_user_account = $img_user_account;
          $u->nombres = ucfirst($user->get('field_nombre')->value)." ".ucfirst($user->get('field_apellidos')->value);
          $u->uid = $user->get('uid')->value; 
          $u->profile = $user->get('field_perfil_usuario')->value;  
          $u->mail = $user->get('mail')->value;   
          $u->node_saved = load_saved_node();
          $variables['user'] = $u;
 // }  
}

function basic_preprocess_profile(&$variables) {
    $profile = $variables['elements']['#profile'];
    $variables['uid'] = $profile->getOwnerId();
    $variables['user'] = $profile->getOwner();
}

function basic_preprocess_page(&$variables) {
  // You will most likely want to show and render the form for anonymous users.
  $variables['login_form'] = FALSE;
  $variables['register_form'] = FALSE;
  $variables['pass_form'] = FALSE;
 
  if (!\Drupal::currentUser()->id()) {
    $form = Drupal::formBuilder()->getForm(Drupal\user\Form\UserLoginForm::class) ; 
    $render = Drupal::service('renderer');
    $variables['login_form'] = $render->renderPlain($form);

    $form = Drupal::formBuilder()->getForm(Drupal\user\Form\UserPasswordForm::class) ; 
    $render = Drupal::service('renderer');
    $variables['pass_form'] = $render->renderPlain($form);
   

    $entity = \Drupal::entityTypeManager()->getStorage('user')->create(array());
    $formObject = \Drupal::entityTypeManager()
      ->getFormObject('user', 'register')
      ->setEntity($entity);
    $form = \Drupal::formBuilder()->getForm($formObject);
    $variables['register_form'] = \Drupal::service('renderer')->render($form);

  }
  
}

/**''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''**/

function basic_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  //print $form_id."<br>";
  $title = isset($form['title']['widget'][0]['value']['#default_value']) ? $form['title']['widget'][0]['value']['#default_value'] : null ;
  
  // redirección restablecer contraseña
  
  
  switch ($form_id) { 
    
    case 'node_manuscrito_editorial_form';
    case 'node_manuscrito_articulo_original_form';
    case 'node_manuscrito_articulo_revision_form';
    case 'node_manuscrito_mini_revision_form';
    case 'node_manuscrito_rondas_clinicas_form';
    case 'node_manuscrito_comentarios_respues_form';
    case 'node_manuscrito_articulo_especial_form';
    case 'node_manuscrito_ciencia_panlar_form';
    case 'node_manuscrito_reportajes_especiales_form';
    case 'node_manuscrito_multimedia_form';
    case 'node_manuscrito_noticia_form';
    case 'node_manuscrito_columnas_form';
    case 'node_manuscrito_form';
      if($title){
        $form['actions']['submit']['#value'] = t('Actualizar');
        foreach (array_keys($form['actions']) as $action) {
          if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
            $form['actions'][$action]['#submit'][] = 'basic_manuscrito_form_update';
          }
        }       
      }else{
        $form['actions']['submit']['#value'] = t('Enviar');
        foreach (array_keys($form['actions']) as $action) {
          if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
            $form['actions'][$action]['#submit'][] = 'basic_manuscrito_form_submit';
          }
        }   
      }         
    break;    

    // commnents form
    case 'node_comentarios_para_autor_form';
      $form['actions']['submit']['#value'] = t('Enviar comentarios al autor');
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'basic_comentarios_form_submit';
        }
      }   
    break; 
    case 'node_comentarios_para_editor_form';
      $form['actions']['submit']['#value'] = t('Enviar comentarios al editor');
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'basic_comentarios_form_submit';
        }
      }   
    break; 

    case 'node_asignacion_revisores_form';
      $form['actions']['submit']['#value'] = t('Asignar revisor');
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'basic_asignacion_revisores_submit';
        }
      }   
    break; 

    case 'node_revision_de_articulos_form';
      $form['actions']['submit']['#value'] = t('Enviar calificación');
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          $form['actions'][$action]['#submit'][] = 'basic_revision_de_articulos_submit';
        }
      }   
    break; 
  }
}


function basic_manuscrito_form_update($form, \Drupal\Core\Form\FormStateInterface $form_state){
  $nid = $form_state->getformObject()->getEntity()->id();
  $node = \Drupal::entityManager()->getStorage('node')->load($nid);
  $label = 'Actualización de artículo recibida';

  $userRevision =  $node->get('revision_uid')->getValue()[0]['target_id'];
  $revisorId =  $node->get('field_revisor')->getValue()[0]['target_id'];
  $autorId = $node->get('uid')->getValue()[0]['target_id'];
  $execute = autor_revisor($node,$nid);
  $statusArticle = (string)$execute['status'];
  $revisorMail = $execute['to_revisor'];
  $autorMail = $execute['to_autor'];
  if($userRevision == $revisorId){    
    if($statusArticle == '708'){
      $node->set('status',1);
      $node->save();
    }
    exec_mail($statusArticle, $node, $nid, $autorMail); // notificacion autor
  }else{
    $node->set('field_estado_del_articulo',573);
    $node->save();
    exec_mail('202', $node, $nid, $revisorMail); // notificacion revisor
    exec_mail('update', $node, $nid, $autorMail); // confirmación al autor sobre su modificación
  }
}

function basic_manuscrito_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state){
  $nid = $form_state->getformObject()->getEntity()->id();
  $node = \Drupal::entityManager()->getStorage('node')->load($nid);
  $execute = autor_revisor($node,$nid);

  $revisorMail = $execute['to_revisor'];
  $autorMail = $execute['to_autor'];
  exec_mail('new', $node, $nid, $autorMail); // notificacion autor
  exec_mail('201', $node, $nid, $revisorMail); // notificacion revisor general
  
  
  $url = Url::fromRoute('thanks_module_page', [
    'type' => $node->get('type')->getValue()[0]['target_id'],
    'nid' => $nid,
  ]);
  
  $form_state->setRedirectUrl($url);
  
}

function basic_comentarios_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state){
  $nid = $form_state->getformObject()->getEntity()->id();
  $comentario = \Drupal::entityManager()->getStorage('node')->load($nid);

  $idComentario = $comentario->get('title')->getValue()[0]['value'];
  $nidArticle = $comentario->get('field_articulo_en_revision')->getValue()[0]['target_id'];
  $type = $comentario->get('type')->getValue()[0]['target_id'];
  $bodyComment = $comentario->get('field_comentarios')->getValue()[0]['value'];
  $node = \Drupal::entityManager()->getStorage('node')->load($nidArticle);
  
  $execute = autor_revisor($node,$nidArticle);

  $revisorMail = $execute['to_revisor'];
  $autorMail = $execute['to_autor'];

  switch ($type) { 
    
    case 'comentarios_para_autor';
      exec_mail('comments', $node, $nidArticle, $autorMail, $idComentario, $bodyComment); 
    break;

    case 'comentarios_para_editor';
      exec_mail('comments', $node, $nidArticle, $revisorMail, $idComentario, $bodyComment); 
    break;
  }
  
  
}

function basic_asignacion_revisores_submit ($form, \Drupal\Core\Form\FormStateInterface $form_state){
  $nid = $form_state->getformObject()->getEntity()->id();
  $asignacion = \Drupal::entityManager()->getStorage('node')->load($nid);
  $revisor = User::load($asignacion->get('field_asignar_revisor')->getValue()[0]['target_id']);
  $revisorMail = $revisor->get('mail')->getValue()[0]['value'];

  $idAsignacion = $asignacion->get('title')->getValue()[0]['value'];
  $nidArticle = $asignacion->get('field_articulo_en_revision')->getValue()[0]['target_id'];
  $node = \Drupal::entityManager()->getStorage('node')->load($nidArticle);
  $node->set('field_estado_del_articulo',573);
  $node->save();

  $execute = autor_revisor($node,$nidArticle);

  exec_mail('assign', $node, $nid, $revisorMail);
}

function basic_revision_de_articulos_submit($form, \Drupal\Core\Form\FormStateInterface $form_state){
  $nid = $form_state->getformObject()->getEntity()->id();
  $calificacion = \Drupal::entityManager()->getStorage('node')->load($nid);

  $idCalificacion = $calificacion->get('title')->getValue()[0]['value'];
  $nidArticle = $calificacion->get('field_articulo_en_revision')->getValue()[0]['target_id'];
  $pr1 = $calificacion->get('field_pregunta_1')->getValue()[0]['value'];
  $pr2 = $calificacion->get('field_pregunta_3')->getValue()[0]['value'];
  $pr3 = $calificacion->get('field_pregunta_3')->getValue()[0]['value'];
  $pr4 = $calificacion->get('field_pregunta_4')->getValue()[0]['value'];
  $pr5 = $calificacion->get('field_pregunta_5')->getValue()[0]['value'];
  $decision = $calificacion->get('field_decision_revisor')->getValue()[0]['value'];
  $comentario = isset($calificacion->get('field_comentarios')->getValue()[0]['value']) ? $calificacion->get('field_comentarios')->getValue()[0]['value'] : 'Ninguno';
  $promedio = ($pr1 + $pr2 +$pr3 + $pr4 + $pr5 )/5 ;
  $node = \Drupal::entityManager()->getStorage('node')->load($nidArticle);

  $execute = autor_revisor($node,$nidArticle);
  $revisorMail = $execute['to_revisor'];
  switch ($decision) {
    case 'aceptado':
      $TextDecision = 'Aceptado';
      break;
    
    case 'aceptado_condicion':
      $TextDecision = 'Aceptado con condiciones';
      break;
    
    case 'rechazado':
      $TextDecision = 'Rechazado';
      break;
  }

  $tokenExtra = '
  <ul>
    <li>Artículo calificado : '.$node->get('title')->getValue()[0]['value'].'</li>
    <li>Id de calificación : '.$idCalificacion.'</li>
    <li>Calificicaciones y decisión:</li>
    <ul>
      <li>¿Qué tan original le parece el manuscrito asignado? : '.$pr1.'</li>
      <li>¿Qué tan relevante es la información presentada en este manuscrito? : '.$pr2.'</li>
      <li>¿Qué tan bien estructurada le parece la información presentada? : '.$pr3.'</li>
      <li>¿Qué tan bien presentado está el contenido del manuscrito? : '.$pr4.'</li>
      <li>¿Qué tan claro es el mensaje que deja el manuscrito? : '.$pr5.'</li>
      <li>Promedio de la calificación : '.$promedio.'</li>
      <li>Decisión : '.$TextDecision.'</li>
      <li>Comentario : '.$comentario.'</li>
    </ul>
  </ul>';

  exec_mail('qualify', $node, $nidArticle, $revisorMail, $tokenExtra);
}


function load_node($nid){
  return $node = \Drupal::entityManager()->getStorage('node')->load($nid);
}

function autor_revisor($node,$nid){
  $mail = null;
  $revisor = User::load($node->get('field_revisor')->getValue()[0]['target_id']);
  $autor =   User::load($node->get('uid')->getValue()[0]['target_id']); 
  $mail = array(
    'title' => $node->get('title')->getValue()[0]['value'],
    'to_revisor' => $revisor->get('mail')->getValue()[0]['value'],
    'name_revisor' =>  ucfirst($revisor->get('field_nombre')->getValue()[0]['value'])." ".ucfirst($revisor->get('field_apellidos')->getValue()[0]['value']),
    'to_autor' => $autor->get('mail')->getValue()[0]['value'],
    'name_autor' => ucfirst($autor->get('field_nombre')->getValue()[0]['value'])." ".ucfirst($autor->get('field_apellidos')->getValue()[0]['value']),
    'url' => \Drupal::request()->getSchemeAndHttpHost().\Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$nid),
    'status' => $node->get('field_estado_del_articulo')->getValue()[0]['target_id'],
  );

  return $mail;
}

function load_saved_node(){
  $id_node = null;
  $rows = [];
  if(Drupal::currentUser()->id() != 0 || null !== Drupal::currentUser()->id()){
    $uid = Drupal::currentUser()->id();
    $query =  \Drupal::database()->select('entity_wishlist', 'ew');
    $query->fields('ew', ["wid", "entity_id"]);
    $query->condition('uid', $uid, "=");
    $query->distinct();
    $pager = $query->extend('Drupal\Core\Database\Query\PagerSelectExtender')->limit(10);
    $list_records = $query->execute()->fetchAll();    
    foreach ($list_records as $data) {
      array_push($rows,$data->entity_id);
    }
    $id_node = implode(',',$rows);    
  }
  return [
    'string' => $id_node,
    'split' => $rows,
  ];
}


function basic_preprocess(array &$variables, $hook) {
  //this is a global hook, its variables are available in any template file
  $variables['nodo_saved'] = load_saved_node();
}
function basic_preprocess_views_view_fields(&$variables) {
  
  $factory = \Drupal::service('tempstore.shared');
  $store = $factory->get('more_shared.shared');
  $value = $store->get('more_shared_count');
  $more_shared_count = json_decode($value, true);
  $variables['more_shared_count'] = $more_shared_count;
}

function basic_preprocess_node(&$variables) {
  // Get statistics count for current node.
  $statistics = \Drupal::service('statistics.storage.node')->fetchView($variables['node']->id());
  if ($statistics !== FALSE) {
    $variables['node_stats'] = $statistics->getTotalCount();
  }else{
    $variables['node_stats'] = '1';
  }
}